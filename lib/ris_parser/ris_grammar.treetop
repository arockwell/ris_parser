grammar RisGrammar
  rule entries
    (entry)+ {
      def eval
        elements.map { |e| e.eval }
      end
    }
  end
  rule entry
    (key_value)+ end_of_record {
      def eval
        entry = Hash.new
        key_values = elements[0].elements[0].eval
        key_values.each do |key_value|
          (key, value) = key_value
          # group multi-valued keys onto an array
          if key == 'A1' || key == 'A2' || key == 'KW'
            if entry[key] == nil
              entry[key] = [value]
            else
              entry[key].push(value)
            end
          else
            entry[key] = value
          end
        end
        return entry
      end
    }
  end
  rule key_value
    (key value seperator)+ {
      def eval
        elements.map { |e| [e.key.eval, e.value.eval]}
      end
    }
  end
  rule key 
   key_name '  - ' {
      def eval
        elements[0].text_value
      end
    }
  end
  rule key_name
    'TY' / 'ID' / 'T1' / 'TI' / 'CT' / 'A1' / 'A2' / 'AU' / 'Y1' / 'PY' / 'N1' /
    'KW' / 'RP' / 'SP' / 'EP' / 'JF' / 'JO' / 'JA' / 'J1' / 'J2' / 'VL' / 'IS' /
    'T2' / 'CY' / 'PB' / 'U1' / 'U5' / 'T3' / 'N2' / 'SN' / 'AV' / 'M1' / 'M3' /
    'AD' / 'UR' / 'L1' / 'L2' / 'L3' / 'L4' {
      def eval
        text_value
      end
    }
  end
  rule value
    [^\n]+ {
      def eval
        text_value
      end
    }
  end
  rule seperator
    "\n"
  end
  rule end_of_record
    "ER  - \n\n" {
      def eval
        "ER"
      end
    }
  end
end
